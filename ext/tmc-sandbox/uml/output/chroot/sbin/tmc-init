#!/bin/sh -e
# This is run instead of /sbin/init to just run the program and shut down asap

echo "Entering tmc-init"

export LANG="en_US.UTF-8"

. /etc/profile

summarize_text_file() {
  touch $1
  LINES=`cat $1 | wc -l`
  if [ $LINES -gt 1000 ]; then
    head -n 500 $1 > "$1.head"
    tail -n 500 $1 > "$1.tail"
    cat "$1.head" > $1
    echo "..." >> $1
    echo "..." >> $1
    echo "..." >> $1
    cat "$1.tail" >> $1
    rm -f "$1.head" "$1.tail"
  fi
}

# Ensure UML block device nodes exist
[ -e /dev/ubda ] || mknod /dev/ubda b 98 0    # Root image
[ -e /dev/ubdb ] || mknod /dev/ubdb b 98 16   # Input tar file
[ -e /dev/ubdc ] || mknod /dev/ubdc b 98 32   # Output tar file
[ -e /dev/ubdd ] || mknod /dev/ubdd b 98 48   # Special purpose read-only file
[ -e /dev/ubde ] || mknod /dev/ubde b 98 64   # Special purpose read-write file
[ -e /dev/ubdf ] || mknod /dev/ubdf b 98 80   # Optional write branch for ubdd

# Mount /proc and /sys
mount -t proc proc /proc
mount -t sysfs sys /sys

# Create a non-root user
useradd --system tmc
mkdir -p /home/tmc
chown tmc /home/tmc

# Mount ubdd as read-only
if `cat /proc/cmdline | grep -E -q ubdd[rc]?[rc]?=`; then
  if `cat /proc/cmdline | grep -E -q nomount_ubdd`; then
    echo "Skipping mounting /ubdd"
  else
    mkdir -p /mnt/ubdd_ro
    mount -o ro /dev/ubdd /mnt/ubdd_ro

    # aufs can't use another aufs as a write branch so we must make a separate
    # ubdd_rw directory for the write branch.
    mkdir -p /mnt/ubdd_rw
    if `cat /proc/cmdline | grep -E -q ubdfc?=`; then
      echo "Mounting /ubdd as read-only with ubdf as write branch"
      mount -o rw /dev/ubdf /mnt/ubdd_rw
    else
      echo "Mounting /ubdd as read-only with writable ramdisk"
      mount -t tmpfs -o rw,size=64M none /mnt/ubdd_rw
    fi

    mkdir -p /ubdd
    mount -t aufs -o rw,br=/mnt/ubdd_rw:/mnt/ubdd_ro aufs /ubdd
  fi
fi

# Mount ubde as read-write
if `cat /proc/cmdline | grep -E -q ubdec?=`; then
  if `cat /proc/cmdline | grep -E -q nomount_ubde`; then
    echo "Skipping mounting /ubde"
  else
    echo "Mounting /ubde as read-write"
    mkdir -p /ubde
    mount -o rw /dev/ubde /ubde
  fi
fi

# Set up localhost even if networking is not enabled
echo "127.0.0.1 localhost" > /etc/hosts
ifconfig lo 127.0.0.1 up

# Set up networking, if enabled
if `cat /proc/cmdline | grep -E -q 'eth0=tuntap'`; then
    GW_ADDR=`cat /proc/cmdline | grep -E -o 'eth0=tuntap,[^ ]*,[^ ]*,[^ ]*' | grep -E -o '[0-9.]+$'`
    echo "Setting up network on TAP device with IP $GW_ADDR"
    INITIAL_PART=`echo $GW_ADDR | grep -E -o '^[0-9]+\.[0-9]+\.[0-9]+\.'`
    LAST_NUMBER=`echo $GW_ADDR | grep -E -o '[0-9]+$'`
    if [ $LAST_NUMBER -eq 254 ]; then
        LAST_NUMBER=2
    else
        LAST_NUMBER=$((LAST_NUMBER+1))
    fi
    IP_ADDR="$INITIAL_PART$LAST_NUMBER"
    echo "Using internal IP address $IP_ADDR"
    
    ifconfig eth0 $IP_ADDR up
    route add -host $IP_ADDR gw $GW_ADDR
    echo "nameserver $GW_ADDR" > /etc/resolv.conf
    
    export http_proxy="http://$GW_ADDR:3128"
    echo "http.proxyHost=$GW_ADDR" >> /opt/jdk/jre/lib/net.properties
    echo "http.proxyPort=3128" >> /opt/jdk/jre/lib/net.properties
    cat /etc/maven-settings.template.xml | sed "s/__PROXY_IP__/$GW_ADDR/" > /opt/maven/conf/settings.xml
fi

if `cat /proc/cmdline | grep -E -q 'run:"([^"]*)"'`; then
  COMMAND=`cat /proc/cmdline | grep -E -o 'run:"([^"]*)"' | sed s/run:\"// | sed s/\"\$//`
  echo "Trying to extract /dev/ubdb as tar to /tmc"
  mkdir -p /tmc
  (tar -C /tmc -xf /dev/ubdb) || true
  echo "Running $COMMAND"
  $COMMAND
elif `cat /proc/cmdline | grep -E -q 'run_tarred_script:([^[:space:]]*)'`; then
  BLOCKDEV=`cat /proc/cmdline | grep -E -o 'run_tarred_script:([^[:space:]]*)' | sed s/run_tarred_script://`
  echo "Untarring $BLOCKDEV"
  mkdir /tmc
  tar -C /tmc -xf $BLOCKDEV
  echo "Running untarred tmc-run"
  SCRIPT=/tmc/tmc-run
  chmod +x $SCRIPT
  $SCRIPT
else
  # Prepare TMC exercise execution
  EXERCISE_TAR=/dev/ubdb
  OUTPUT_FILE=/dev/ubdc
  WORKDIR=/tmc

  mkdir -p $WORKDIR
  cd $WORKDIR

  tar xf $EXERCISE_TAR

  chown -R tmc $WORKDIR
  chmod -R u+rX $WORKDIR

  echo "Starting tmc-run"
  chmod +x tmc-run
  ( set +e; su tmc -c ./tmc-run; echo -n $? > exit_code.txt; true )
  EXIT_CODE=`cat exit_code.txt`
  echo "Completed tmc-run. Exit code: $EXIT_CODE"

  # Write the result
  touch test_output.txt
  summarize_text_file stdout.txt
  summarize_text_file stderr.txt
  touch valgrind.log
  touch validations.json

  tar c test_output.txt exit_code.txt stdout.txt stderr.txt valgrind.log validations.json > $OUTPUT_FILE
fi

# Shut down
echo "Shutting down..."
exec fast-shutdown # custom shutdown program instead of poweroff
